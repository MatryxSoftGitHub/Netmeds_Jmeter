<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">log.info(&quot;--------------Initialize&quot;);
import java.time.Duration;
import java.time.Instant;

Instant myStart = Instant.now();
props.put(&quot;varmyStart&quot;,myStart);
log.info(&quot;Test Start time: ----  &quot;+props.get(&quot;varmyStart&quot;));

//response
props.put(&quot;propResponse&quot;,&quot;Test Start time { &quot;+props.get(&quot;varmyStart&quot;)+&quot; }&quot;);
SampleResult.setResponseData(props.get(&quot;propResponse&quot;));</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="tearDown Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </PostThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">log.info(&quot;---------------End Test JSR223Sampler&quot;);
//props.put(&quot;varEndTest&quot;,&quot;Yes&quot;); 
import java.time.Duration;
import java.time.Instant;
Instant myEnd = Instant.now();
props.put(&quot;varmyEnd&quot;,myEnd);
log.info(&quot;varmyEnd----  &quot;+props.get(&quot;varmyEnd&quot;));
Duration timeElapsed = Duration.between(props.get(&quot;varmyStart&quot;), 
props.get(&quot;varmyEnd&quot;));
//millis
props.put(&quot;varTimeTakenMS&quot;,timeElapsed.toMillis().toString());
log.info(&quot;prop varTimeTaken(MS): --&quot;+props.get(&quot;varTimeTakenMS&quot;));
//seconds
props.put(&quot;varTimeTakenSEC&quot;,timeElapsed.getSeconds());
log.info(&quot;prop varTimeTaken(SEC): --&quot;+props.get(&quot;varTimeTakenSEC&quot;));
//minutes
props.put(&quot;varTimeTakenMINS&quot;,timeElapsed.toMinutes().toString());
log.info(&quot;prop varTimeTaken(MINS): --&quot;+props.get(&quot;varTimeTakenMINS&quot;));
//response
props.put(&quot;propResponse&quot;,&quot;Test End time { &quot;+props.get(&quot;varmyEnd&quot;)+&quot; }.  
Test Duration: &quot;+props.get(&quot;varTimeTakenMINS&quot;)+&quot; Minutes&quot;);
SampleResult.setResponseData(props.get(&quot;propResponse&quot;));</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
